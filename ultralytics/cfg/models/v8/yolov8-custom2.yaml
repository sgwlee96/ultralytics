# Custom YOLOv8 with BiFPN, RT-DETR Decoder, and Multi Detection Heads
nc: 80  # Number of classes (modify based on your dataset)

# Model scaling constants ( inherited from YOLOv8 )
scales:
  n: [0.33, 0.25, 1024]  # Nano scale for lightweight model
  s: [0.33, 0.50, 1024]  # Small scale
  m: [0.67, 0.75, 768]   # Medium scale
  l: [1.00, 1.00, 512]  # Large scale
  x: [1.00, 1.25, 512]  # Extra-large scale

# CSPDarkNet Backbone (YOLOv8 backbone retained)
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]]   # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]]  # 1-P2/4
  - [-1, 3, C2f, [128, True]]   # 2
  - [-1, 1, Conv, [256, 3, 2]]  # 3-P3/8
  - [-1, 6, C2f, [256, True]]   # 4
  - [-1, 1, Conv, [512, 3, 2]]  # 5-P4/16
  - [-1, 6, C2f, [512, True]]   # 6
  - [-1, 1, Conv, [1024, 3, 2]] # 7-P5/32
  - [-1, 3, C2f, [1024, True]]  # 8
  - [-1, 1, SPPF, [1024, 5]]    # 9 (P5 output)

# BiFPN (Bidirectional Feature Pyramid Network)
head:
  # Define BiFPN layers with inputs from backbone P3, P4, P5 (layers 4, 6, 9)
  # [from, repeats, module, args]
  # First BiFPN layer: Top-down and bottom-up fusion
  - [[4, 6, 9], 1, BiFPNLayer, [256]]  # 10: Fuse P3, P4, P5 -> 256 channels
  # Additional BiFPN layers for iterative refinement (e.g., 2 repeats)
  - [-1, 1, BiFPNLayer, [256]]         # 11: Refine fused features
  - [-1, 1, BiFPNLayer, [256]]         # 12: Final BiFPN output (P3', P4', P5')

# RT-DETR Transformer Decoder
  # [from, repeats, module, args]
  - [[10, 11, 12], 1, RTDETRDecoder, [256, 6, 300]]  # 13: Input from BiFPN, 6 layers, 300 queries

# Multi YOLO Detection Heads

  # [from, repeats, module, args]
  - [-1, 1, MultiDetect, [nc, 256]]  # 14: Detect from decoder output (P3', P4', P5')
